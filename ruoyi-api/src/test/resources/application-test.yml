#测试环境-htjf
server:
    port: 8070
    session:
        timeout: 6000
    tomcat:
        uri-encoding: UTF-8
#配置信息
htjf:
   # 是否打印 sql语句
  showsql: true
  # AOP记录用户操作日志，true开启，false关闭
  open-aop-log: true
  security:
    # 登录路径
    news-url: http://120.197.52.117:9082/TestSpeedCloud/news/detail.action?id=
# 驱动配置信息
spring.datasource.url : jdbc:oracle:thin:@(DESCRIPTION=  (ADDRESS_LIST  =  (ADDRESS  =  (PROTOCOL  =  TCP)(HOST  =  120.197.52.115)(PORT  =  1528))  (ADDRESS  =  (PROTOCOL  =  TCP)(HOST  =  120.197.52.115)(PORT  =  1528))  (ADDRESS  =  (PROTOCOL  =  TCP)(HOST  =  120.197.52.115)(PORT  =  1528))  (FAILOVER=ON)(LOAD_BALANCE=OFF)  )  (CONNECT_DATA  =    (SERVICE  =  dedicated)    (SERVICE_NAME  =  rac1)  (FAILOVER_MODE  =    (TYPE  =  SELECT)  (METHOD  =  BASIC)  )  )  )
spring.datasource.username : t_family
spring.datasource.password : testfamily
spring.datasource.driverClassName : oracle.jdbc.OracleDriver
#以下为druid增加的配置
spring.datasource.type : com.alibaba.druid.pool.DruidDataSource
 
# 下面为连接池的补充设置，应用到上面所有数据源中
# 初始化大小，最小，最大
spring.datasource.initialSize : 20
spring.datasource.minIdle : 5
spring.datasource.maxActive : 100
# 配置获取连接等待超时的时间
spring.datasource.maxWait : 60000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.timeBetweenEvictionRunsMillis : 60000
# 配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.minEvictableIdleTimeMillis : 300000
spring.datasource.validationQuery : SELECT 1 FROM DUAL
spring.datasource.testWhileIdle : true
spring.datasource.testOnBorrow : false
spring.datasource.testOnReturn : false
# 打开PSCache，并且指定每个连接上PSCache的大小
spring.datasource.poolPreparedStatements : true
spring.datasource.maxPoolPreparedStatementPerConnectionSize : 20
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
spring.datasource.filters : stat,log4j
# 通过connectProperties属性来打开mergeSql功能；慢SQL记录
spring.datasource.connectionProperties : druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
# 合并多个DruidDataSource的监控数据
#spring.datasource.useGlobalDataSourceStat : true
#jpa配置
#spring.jpa.database: Oracle
#spring.jpa.show-sql: true
#spring.jpa.hibernate.ddl-auto: update
#spring.jpa.properties.hibernate.default_schema: t_family